@copyrighted 1999 Valerie Colber
Luis Cermeno-Farro 1837034:  
Course and section: COMSC-110-8076

1. Objective (1 sentence brief description of what this will do): 
Read song names from a text file named songs.txt, randomly select one song and output its song to the user
2. Requirements (any and all requirements organized by input, processing, output, data):
INPUT (any data items to be input): 
-playAgain

PROCESSING (list of significant parts of the objective that will become the list of code blocks in program):
1. data definitions
2. user introduction
3. store the song names
4. prompt the user if they want to play a song, select one randomly and output its name

OUTPUT (list of anything output: introduction, data items, labels, prompts) : 
-user introduction: introduction of objective, author, user instructions/rules
-prompt "play a song [Y/N] ?:"
-output an element of the list song
-output in case of invalid input of playAgain "Invalid input, please try again"

DATA (list of all data items: definition, data type, formatting, or any other specifications):
-MAX_SONGS // (integer) is the maximun song names that th list song can process<main>
-nSongs // (integer )is how many song names the list has so far<main>
-song // (list)  is the list of song names<main>
-lineFromFile // (text) is a line from the text file<main>
-playAgain //(integer) 'Y' for yes or 'N' for no.<main>
-shuffle = true // (boolean) is true if the user wants another random song <main>
-random // (integer) a random number from 0-199 <outputSong>
-nSong // (integer )is how many song names the list has so far<outputSong>
-song // (list)  is the list of song names<outputSong>

3. Algorithm instructions (recipe)

<algorithm for subprogram outputSong>
1010 set random to a computer generated random number between 0 and the value of nSong
1020 output the value of the song[random]
1030 return to main program

<algorithm for main program>
***data
10 set MAX_SONGS = 200
20 set nSongs = 0;
30 set shuffle = true;
***introduction 
40 output introduction: objective, author, instructions/rules
***store the song names
50 open text file "songs.txt"
60 if the file has an error skip to 999
70 if end of file is reached OR nSongs >= 200 skip to 130
80 set lineFromFile to the next file in songs.txt
90 if length lineFromFile is 0 then skip to 120
100 song[nSongs] = lineFromFile
110 nSongs = nSongs + 1
120 go back to 70
130 close "song.txt"
***prompt the user if they want to play a song, select one randomly and output its name
140 prompt "play a song [Y/N] ?:"
150 input playAgain
160 if upper case playAgain = N then skip to 999
170 if upper case playAgain = Y then go to subprogram outputSong , otherwise output "Invalid input, please try again" and go back to 140
180 go back to 140
999 END

4. Test cases (list purpose of each test case, any input values, and expected results)

Test case #1: 
-->purpose: test the simplest test case
-->input values: songs.txt
Hey Jude
Imagine
Johnny B. Goode
-->expected console execution:
play a song [Y/N] ?:y
Johnny B. Goode (random = 3)
play a song [Y/N] ?:y
Hey Jude random = 1
play a song [Y/N] ?:y
Imagine random = 2
play a song [Y/N] ?:y
Imagine random = 2
play a song [Y/N] ?:n
-->execution:
***data
10 MAX_SONGS = 200
20 nSongs = 0;
30 shuffle = true;
***introduction 
40 output introduction: objective, author, instructions/rules
***store the song names
50 "songs.txt" opened
60 False, no error
70 False
80 lineFromFile = Hey Jude
90 False
100 song[0] = Hey Jude
110 nSongs = 0 + 1
120 going back to 70
70 False
80 lineFromFile = Imagine
90 False
100 song[1] = Imagine
110 nSongs = 1 + 1 = 1
120 going back to 70
70 False
80 lineFromFile = Johnny B. Goode
90 False
100 song[0] = Johnny B. Goode
110 nSongs = 2 + 1 = 3
120 going back to 70
70 end of file is reached skipping to 130=
130 close "song.txt"
***prompt the user if they want to play a song, select one randomly and output its name
140 play a song [Y/N] ?"
150 y
160 False
170 True, going to subprogram outputSong
<outputSong>
1010 3 generated
1020 Johnny B. Goode
1030 returning to main program
<main>
180 going back to 140
140 play a song [Y/N] ?"
150 y
160 False
170 True, going to subprogram outputSong
<outputSong>
1010 1 generated
1020 Hey Jude
1030 returning to main program
<main>
180 going back to 14
140 play a song [Y/N] ?"
150 y
160 False
170 True, going to subprogram outputSong
<outputSong>
1010 2 generated
1020 Imagine
1030 returning to main program
<main>
180 going back to 140
140 play a song [Y/N] ?"
150 y
160 False
170 True, going to subprogram outputSong
<outputSong>
1010 2 generated
1020 Imagine
1030 returning to main program
<main>
180 going back to 140
140 play a song [Y/N] ?"
150 n
160 True, skipping to 999
999 END

Test case #2: 
-->purpose: what if the text file has blank spaces
-->input values: songs.txt
Hey Jude

Imagine
Johnny B. Goode
-->expected console execution:
play a song [Y/N] ?:y
Johnny B. Goode (random = 3)
play a song [Y/N] ?:y
Hey Jude random = 1
play a song [Y/N] ?:y
Imagine random = 2
play a song [Y/N] ?:y
Imagine random = 2
play a song [Y/N] ?:n
--> comments: to pass the test the list song has to have all his elements filled, no one  blank.

Test case #3: 
-->purpose: what if the text file is empty
-->input values: songs.txt [empty]
-->expected console execution:
play a song [Y/N] ?:y

play a song [Y/N] ?:y

play a song [Y/N] ?:y

play a song [Y/N] ?:y

play a song [Y/N] ?:n
--> comments: THIS VALIDATION WAS NOT REQUIRED BY THE GUIDELINES.. BUT for future versions the program should identidy this issue and let the user know.

Test case #4: 
-->purpose: what if the text file does not exist
-->input values: songs.txt [does not exist in local directory]
-->expected console execution:
PROGRAM DOES NOT RUN
--> comments: THIS VALIDATION WAS NOT SPCIFIED BY THE GUIDELINES.. BUT for future version the program should output an alert before ending.
