@copyrighted 1999 Valerie Colber
Luis Cermeno-Farro 1837034:  
Course and section: COMSC-110-8076

1. Objective (1 sentence brief description of what this will do): 
Interactive game in which the user has to guess a number between 1 and 100.
2. Requirements (any and all requirements organized by input, processing, output, data):
INPUT (any data items to be input): 
-guess

PROCESSING (list of significant parts of the objective that will become the list of code blocks in program):
1. data definitions and generation of a ramdom number between 1 and 100
2. user introduction
3. input each user guess and check for sentinel value or valid input
4. determine and output appropiate user guess feedback

Possible functions:
-Check for repeated value function
-Feedback evaluator function (wheter is to high ,low or correct)

OUTPUT (list of anything output: introduction, data items, labels, prompts) : 
-user introduction: "Objective: Ask the user to guess a number between 1 and 100."
-prompt: "I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit] :"
-user feedback: "That's too high--guess again:", or "That's too low--guess again:", or "That's right--it's" and number; or in case of invalid input "Invalid input--guess again:" or in case of repeated guess "You already guessed" and value of userGuess

DATA (list of all data items: definition, data type, formatting, or any other specifications):
-number // (integer): a ramdom number from 1 to 100 generated by the computer 
-userGuess // (integer): number guessed by the user.
-guess // (list of integers) : is a list of integers used to store user input values
-MAX_GUESSES // (integer): is the maximun capacity of the list "guess"
-nGuesses // (integer) : is the divider that tells until which element the list "guess" is filled with values

3. Algorithm instructions (recipe)
***Data definition and generation of a ramdom number between 1 and 100
10 initialize ramdom number generator and set target to random number between 1 and 100
***Introduction 
20 output introduction: "Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno"
***Input each user guess and check for sentinel value or valid input
30 set MAX_GUESSES = 100
35 set nGuesses = 0
40 create an empty list of integers named "guess" with a maximun capacity of MAX_GUESSES to store user input values
45 output prompt "I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit] :"
50 input userGuess
55 if userGuess = 0 then skip to line 999
60 if userGuess < 0 or userGuess > 100 then output "Invalid input--guess again:" and skip to line 50
65 set i = 0
70 if i => nGuesses skip to line 90
75 if guess[i] = userGuess then output "You already guessed" and value of userGuess, then skip to line 50
80 i = i + 1
85 go back to line 70
***Determine and output appropiate user guess feedback
90 if nGuesses < MAX_GUESSES then guess[nGuesses] = userGuess and nGuesses = nGuesses + 1
95 if userGuess > target then output "That's too high--guess again:" and skip to line 50
100 if userGuess < target then output "That's too low--guess again:" and skip to line 50
105 if userGuess is equal to target then output "That's right--it's" and number.
999 END

4. Test cases (list purpose of each test case, any input values, and expected results)

Test case #1
-purpose: test given example
-targed: 28
-input: user guess = 50, 25, 37, 31, 25, 28.
-expected reults: 
That's too high -- guess again: 25
That's too low -- guess again: 37
That's too high -- guess again: 31
That's too high -- guess again: 25
You already guessed 25 -- guess again: 28
That's right -- it's 28
-execution:
***Data definition and generation of a ramdom number between 1 and 100
10 random number generated : 28
***Introduction 
20 "Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno"
***Input each user guess and check for sentinel value or valid input
30 MAX_GUESSES = 100
35 nGuesses = 0
40 list "guess" created with a maximun of 100 values
45 "I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit] :"

50 userGuess = 50
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100 
65 i = 0
70 True, i = 0 is => nGuesses = 0, skipping to line 90
***Determine and output appropiate user guess feedback
90 True, guess[0] = 50, nGuesses = 0 + 1 = 1
95 True, "That's too high--guess again:" 

50 userGuess = 25
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100 
65 i = 0
70 False, i = 0 is not => nGuesses = 1
75 False
80 i = 0 + 1 = 1
85 go back to line 70
70 True, i = 1 is => nGuesses = 1
***Determine and output appropiate user guess feedback
90 True, guess[1] = 25, nGuesses = 1 + 1 = 2
95 False
100 True, "That's too low--guess again:" 

50 userGuess = 37
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100
65 i = 0
70 False, i = 0 is not => nGuesses = 2
75 False
80 i = 0 + 1 = 1
85 go back to line 70
70 False, i = 1 is not => nGuesses = 2
75 False
80 i = 1 + 1 = 2
85 go back to line 70
70 True, i = 2 is => nGuesses = 2
***Determine and output appropiate user guess feedback
90 True, guess[2] = 37, nGuesses = 2 + 1 = 3
95 True, "That's too high--guess again:" 

50 userGuess = 31
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100
65 i = 0
70 False, i = 0 is not => nGuesses = 3
75 False
80 i = 0 + 1 = 1
85 go back to line 70
70 False, i = 1 is not => nGuesses = 3
75 False
80 i = 1 + 1 = 2
85 go back to line 70
70 False, i = 2 is not => nGuesses = 3
75 False
80 i = 2 + 1 = 3
85 go back to line 70
70 True, i = 3 is => nGuesses = 3
***Determine and output appropiate user guess feedback
90 True, guess[3] = 31, nGuesses = 3 + 1 = 4
95 True, "That's too high--guess again:" 

50 userGuess = 25
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100
65 i = 0
70 False, i = 0 is not => nGuesses = 4
75 False
80 i = 0 + 1 = 1
85 go back to line 70
70 False, i = 1 is not => nGuesses = 4
75 True, guess[1] = 25 is equal to userGuess = 25, "You already guessed 25", skipping to line 50 

50 userGuess = 28
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100
65 i = 0
70 False, i = 0 is not => nGuesses = 4
75 False
80 i = 0 + 1 = 1
85 go back to line 70
70 False, i = 1 is not => nGuesses = 4
75 False
80 i = 1 + 1 = 2
85 go back to line 70
70 False, i = 2 is not => nGuesses = 4
75 False
80 i = 2 + 1 = 3
85 go back to line 70
70 False, i = 3 is not => nGuesses = 4
75 False
80 i = 3 + 1 = 4
85 go back to line 70
70 True, i = 4 is => nGuesses = 4
***Determine and output appropiate user guess feedback
90 True, guess[4] = 28, nGuesses = 4 + 1 = 5
95 False
100 False
105 True, "That's right--it's 28"
999END

Test case #2
-purpose: test the case in which the usee wants to exit the program
-targed: 28
-input: user guess = 50, 0.
-expected reults: 
That's too high -- guess again: 25
-execution:
***Data definition and generation of a ramdom number between 1 and 100
10 random number generated : 28
***Introduction 
20 "Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno"
***Input each user guess and check for sentinel value or valid input
30 MAX_GUESSES = 100
35 nGuesses = 0
40 list "guess" created with a maximun of 100 values
45 "I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit] :"
50 userGuess = 50
55 False, userGuess is not = 0 
60 False, userGuess is not < 0 nor > 100 
65 i = 0
70 True, i = 0 is => nGuesses = 0, skipping to line 90
***Determine and output appropiate user guess feedback
90 True, guess[0] = 50, nGuesses = 0 + 1 = 1
95 True, "That's too high--guess again:" 
50 userGuess = 0
55 True, userGuess is  = 0, skipping to line 999
999 END


Test case #3
-purpose: test input validation
-targed: 28
-input: user guess = -2, 102, 0
-expected reults: 
That's too high -- guess again: 25
-execution:
***Data definition and generation of a ramdom number between 1 and 100
10 random number generated : 28
***Introduction 
20 "Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno"
***Input each user guess and check for sentinel value or valid input
30 MAX_GUESSES = 100
35 nGuesses = 0
40 list "guess" created with a maximun of 100 values
45 "I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit] :"
50 userGuess = -2
55 False, userGuess is not = 0 
60 True, userGuess is < 0 , "Invalid input--guess again:", skipping to lne 50
50 userGuess = 102
55 False, userGuess is not = 0 
60 True, userGuess is > 100 , "Invalid input--guess again:", skipping to lne 50
50 userGuess = 0
55 True, userGuess is 0, skipping to line 999
999 END


