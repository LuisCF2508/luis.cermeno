@copyrighted 1999 Valerie Colber
Luis Cermeno-Farro 1837034:  
Course and section: COMSC-110-8076

1. Objective (1 sentence brief description of what this will do): 
Ask the user to guess a number between 1 and 100.
2. Requirements (any and all requirements organized by input, processing, output, data):
INPUT (any data items to be input): 
-guess

PROCESSING (list of significant parts of the objective that will become the list of code blocks in program):
1. User introduction
2. Data initialization and generation of a ramdom number between 1 and 100
3. Create or Read file and output last score
3. Game loop where the user guesses and gets feedback
4. Save the use score in text file

Function to output introduction
Function to create or read file and get lastScore <readFile> 
Function to ask for user input and output feedback <userInput>
Function to overwritefile with user Score <overwriteFile>


OUTPUT (list of anything output: introduction, data items, labels, prompts) : 
-user introduction: "Objective: Ask the user to guess a number between 1 and 100."
- label "Last player took" and lastScore " guesses to guess the correct number"
-output "No player has played the game yet, you are the first one good luck!."
-prompt: "I'm thinking of a number from 1 to 100. Guess what it is :"
-user feedback: "That's too high--guess again:", or "That's too low--guess again:", or "That's right--it's" and number; or in case of invalid input "Invalid input--guess again:"


DATA (list of all data items: definition, data type, formatting, or any other specifications):
-target (integer): a ramdom number from 1 to 100 generated by the computer <main>
-i (integer): number of guesses the user is taking. <main>

-lastScore (integer): number of guesses the last user took to guess the correct number <readFile> 

-userGuess (integer): number guessed by the user. <userInput>
-i (integer): counter for the main loop of the program. <userInput>


3. Algorithm instructions (recipe)
***Introduction
10 output introduction: "Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno"
***Data initialization and generation of a ramdom number between 1 and 100
15 initialize ramdom number generator and set target to random number between 1 and 100
16 set i = 0
***Create or Read file and output last score
20 open file "score.txt"
21 check for file errors, if there is an error create another file.
22 set lastScore = first line of the file
23 if lastScore > 0 output "Last player took" and lastScore " guesses to guess the correct number", otherwise output "No player has played the game yet, you are the first one good luck!."
24 close file "score.txt"
***Game loop where the user guesses and gets feedback.
30 output prompt "I'm thinking of a number from 1 to 100. Guess what it is:"
40 i = i + 1
45 input userGuess
50 if userGuess < 1 or userGuess > 100 then output "Invalid input--guess again:" and skip to line 45
60 if userGuess > target then output "That's too high--guess again:" and skip to line 40
70 if userGuess < target then output "That's too low--guess again:" and skip to line 40
80 if userGuess is equal to target then output "That's right--it's" and number.
***Save the user score in text file
90 open "score.txt"
91 overwrite value of i
92 close "score.txt"


999 END

4. Test cases (list purpose of each test case, any input values, and expected results)

Test case #1
-purpose: test two cases of failing the guess: one too high and one too low, one of invalid input and one of correct guess
-input: user guess = 10, 60, 120, 50.
-expected reults: "That's too low--guess again:", "That's too high--guess again:", "Invalid input--guess again:", "That's right--it's 50"
-execution:
10 Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno
15 target = 50
16 i = 0
20 "score.txt" opened
21 No errors found, file ready to read
22 lastScore = 0
23 No player has played the game yet, you are the first one good luck!
24 "score.txt" closed
30 I'm thinking of a number from 1 to 100. Guess what it is [1-100 or 0 to Exit]:
40 i = 0 + 1 = 1
45 10
50 False
60 False
70 False
80 That's too low--guess again:
40 i = 1 + 1 = 2
45 userGuess = 60
50 False
60 That's too high--guess again:
40 i = 2 + 1 = 3
45 userGuess = 120
50 Invalid input--guess again:"
45 userGuess = 50
50 False
60 False
70 False
80 That's right--it's 50
90 "score.txt" opened
91 3 has been overwritten in the first line of "score.txt"
92 score.txt" closed
999 END
comments: Successful execution.
There is no way the user can exit the program other than guessing, there is no sentinel value because the guidelines didn't require it.

Test case #2
-purpose: test what would happened if the file "score.txt" didnt exist
-input: none
-expected result: Run time error, program ended.
-execution:
10 Objective: Ask the user to guess a number between 1 and 10. Author: Luis Cermeno
15 target = 50
16 i = 0
20 "score.txt" not found
21 Error, creating a new file "score.txt"
22 lastScore = 0
23 No player has played the game yet, you are the first one good luck!.
24 ....
...


