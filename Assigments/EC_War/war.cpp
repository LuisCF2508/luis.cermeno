//Objective:  Display an interactive cards game human vs. computer.
//Name: Luis Cermeno-Farro 1837034
//Course: COMSC-110-8076
//Compiler: Xcode
//Editor: TextEdit
//is this gonna be ignored?
//libraries
#include <iostream>
#include <string>
using namespace std;

#include <cstdlib>
#include <ctime>

//Programmer defined data types
struct PlayingCard
{
  int value;//(integer) computer's or human's card value,number between 2-14
  int suit; //(integer) computer's or human's card suit, number between 0-3
}; //PlayingCard

//Special compiler dependent definitions
//NONE

//global constants/variables
//NONEbâˆ«

//Programmer defined functions
void introduction(string obj);//user introduction
int random_valueOrSuit(string valueOrSuit);//function to generate a random number for value or suit
void outputCard(PlayingCard& card);//function to output card 
bool getYesOrNo(); //function to prompt the user if they want to playAgain
bool checkSuits(PlayingCard* card, int n_Cards); //function to check for 13 repeated suits

//main program
int main()
{
  //Data definitions
  //For CardValues: 11 as Jack, 12 as Queen, 13 as King, and 14 as Ace
  //For Cardsuits: 0 as Spades, 1 as Diamonds, 2 as Hearts, and 3 as Clubs
  string objective = "Display an interactive cards game human vs. computer.\n";
  int i = 0; //(integer) is a counter to traverse cards array
  bool playAgain; //(boolean) is true if the user wants to play again
  bool shuffle = false; // (boolean) is true if the deck needs a shuffle (reset the array for cards)

  //Creation of array-based list of objects for PlayingCard structure
  const int MAX_CARDS = 52; //list capacity: if 52 cards have been played the list will be reset
  int n_Cards = 0; //list size
  PlayingCard cardHuman[MAX_CARDS];// list for human cards
  PlayingCard cardComputer[MAX_CARDS];// lost for computer cards

  //User introduction
  introduction(objective);

  do
  {
    //Generation of a random numbers 
    srand(time(0)); //"seed the ramdom number generator"
    cardHuman[i].value = random_valueOrSuit("value");
    cardHuman[i].suit = random_valueOrSuit("suit");
    cardComputer[i].value = random_valueOrSuit("value");
    cardComputer[i].suit = random_valueOrSuit("suit");
    
    //Output cards value and suit
    cout << "Pair of Cards #" << n_Cards + 1 << ":" << endl;
    cout << "Human's card is a ";
    outputCard(cardHuman[i]);
    cout << endl;
    cout << "Computer's card is a ";
    outputCard(cardComputer[i]);
    cout << endl;

    //Output winner decision
    if (cardComputer[i].value > cardHuman[i].value) cout << "Computer wins!" << endl;
    else if (cardComputer[i].value < cardHuman[i].value) cout << "Human wins!" << endl;
    else
    {
      cout << "It's a tie!" << endl;
    } 
    playAgain = getYesOrNo();
    n_Cards++;

    //Check for deck shuffling
    shuffle = checkSuits(cardHuman, n_Cards);
    shuffle = checkSuits(cardComputer, n_Cards );
    if (shuffle == true)
    {
      cout << "13 cards of the same suit have been played, re-shuffling the deck." << endl << "..." << endl << endl;
      n_Cards = 0;
    }
    if (n_Cards == 52) 
    {
      cout << "52 pairs of cards have been played, re-shuffling the deck." << endl << "..." << endl << endl;
      n_Cards = 0;
    }
  } while (playAgain == true);
}//main



//function: introduction
void introduction(string obj)//user introduction
{
  //Data
  //obj is the program objective
  //introduction
  cout << obj; 
  cout << "Programmer: Luis Cermeno-Farro\n"; 
  cout << "Editor(s) used: TextEdit\n"; 
  cout << "Compiler(s) used: Xcode\n"; 
  cout << "File: " << __FILE__ << endl; 
  cout << "Complied: " << __DATE__ << " at " << __TIME__ << endl << endl; 

}//function: introduction

//function to generate a random number for value or suit
int random_valueOrSuit(string valueOrSuit)
{
  //Data
  int result = 0; // (integer) is the generated random number returned to main
  //Generation of random number
  if (valueOrSuit == "value")
  {
    result = 2 + rand() % 13; // assignment of the ramdom number from 2 to 14 generated by the computer
  }
  else if (valueOrSuit == "suit")
  {
    result = rand() % 4; // assignment of the ramdom number from 0 to 3 generated by the computer
  }
  return result;
}//function to generate a random number for value or suit


//function to output card 
void outputCard(PlayingCard& card)
{
  switch (card.value)
  {
    case 11:
      cout << "Jack";
      break;
    case 12:
      cout << "Queen";
      break;
    case 13:
      cout << "King";
      break;
    case 14:
      cout << "Ace";
      break;
    default:
      cout << card.value;
  }//switch
  cout << " of ";
  switch (card.suit)
  {
    case 0:
      cout << " Spades.";
      break;
    case 1:
      cout << " Diamonds.";
      break;
    case 2:
      cout << " Hearts.";
      break;
    case 3:
      cout << " Clubs.";
   }//switch
}//function to output card 


//function to prompt the user if they want to playAgain
bool getYesOrNo()
{ 
  bool playAgain = true; // (boolean) is true if the user wants to play again, value returned to main
  char inputPlayAgain; // (char) is the character input by the user
  while (true) // loop for input validation of playAgain
  {
    cout << "Continue? [Y/N]: ";
    cin >> inputPlayAgain;
    cin.ignore(1000,10);
    if (toupper(inputPlayAgain) == 'Y') 
    {
      playAgain = true;
      break;
    }
    else if (toupper(inputPlayAgain) == 'N') 
    {
      playAgain = false;
      break;
    }
    else cout << "Invalid input, please try again" << endl;
   } // loop for input validation of playAgain
  cout << endl;
  return playAgain;
}//function to prompt the user if they want to playAgain


//function to check for 13 repeated suits
bool checkSuits(PlayingCard* card, int n_Cards)
{
  bool shuffle = false; // (boolean) is true if the deck needs a shuffle (reset the array for cards), value returned to main program
  int nSpades = 0; // (integer) number of Spades already played
  int nDiamonds = 0;// (integer) number of Diamonds already played
  int nHearts = 0;// (integer) number of Hearts already played
  int nClubs = 0;// (integer) number of Clubs already played
    
  for (int i = 0; i < n_Cards - 1; i++)
  {
    switch (card[i].suit)
    {
      case 0:
        nSpades++;
        break;
      case 1:
        nDiamonds++;
        break;
      case 2:
        nHearts++;
        break;
      case 3:
        nClubs++;
    }
  }
  if (nSpades > 13 || nDiamonds > 13 || nHearts > 13 || nClubs > 13 ) shuffle = true;
  return shuffle;
}//function to check for 13 repeated suits

