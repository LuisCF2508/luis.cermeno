@copyrighted 1999 Valerie Colber
Luis Cermeno-Farro 1837034:  
Course and section: COMSC-110-8076

1. Objective (1 sentence brief description of what this will do): 
Extract email addresses embedded in an input text file, and copy them to an output text file.

2. Requirements (any and all requirements organized by input, processing, output, data):
INPUT (any data items to be input): 
-iFileName
-oFileName
-wait

PROCESSING (list of significant parts of the objective that will become the list of code blocks in program):
1. data definitions
2. user introduction
3. get filenames (input and output) using variable prompts and default filenames and input validation (subprogram getFileName)
4. output filenames and pause program execution until user presses enter key
5. read input file (subprogram readFile)
6. check whether a character is a valid email address character (subprogram isValidEmailChar)
7. search each line for @'s if 1st valid email address character of anEmail is before @, and 1st non-valid email address character is after @, and there is a dot at least 1 character beyond @, then extract a valid email address (subprogram processLine)
8. change the case of a string for comparisions (subprogram changeCase)
9. maintain list of non-duplicate email addresses by checking for case independent duplicate email addresses (subprogram isDuplicate)
10. sort list of non-duplicate email alphabetically (subprogram sortList)
11. output list of emails to output file and to console giving instructions on how to use it (subprogram outputList)

OUTPUT (list of anything output: introduction, data items, labels, prompts) : 
-user introduction: introduction of objective, author:
                                          "WELCOME TO EMAIL.CPP"
"This program is created to make it easier to send an email to multiple recipients when they are not already in your conctacts list."
"When the list of your recipients are inside a webpage; for example, you would need to copy one by one into your 'to' field."
"With email.cpp, you just need to copy the content of the webpage into a text file and select it as the input file for the program.
"The program will automatically extract all emails embedded and write them into one line in your selected input file.  
"Now its all ready to just copy paste that into your 'to' field. No more effort needed."
"INSTRUCTIONS:"
"This program will prompt you for two text file names, an input and an output file."
"Please type the name of each file correctly including the extension .txt. No other file extension is yet supported."
"If you do not specify your output file, your input file will be overwritten with the emails extracted."<<endl;
-prompt "Enter input filename [Press ENTER for default: " and dFileName " ]: "
-prompt "Enter output filename [Press ENTER for default: " and dFileName " ]: "
-output in case of invalid input "Sorry, that is an invalid name. The file name must have the .txt extension. Try again please." 
-output in case of no emails  "Sorry, no email addresses were found in the file" and value of iFileName
-output "Sorry, it seems that the file " iFileName " cannot be opened. It might contain an error, not exist in local directory or be locked to access."
-output "Emails found in the file " and value of iFileName
-output each value of anEmail
-output "SUCCESS! " and size of nonDup list " emails were found, and copied to the file " and value oFileName  " as follows:"
-output each element of nonDup list
-output "Now, you may open the file " and value of oFileName " and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message."
-output "In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to."


DATA (list of all data items: definition, data filetype, formatting, or any other specifications):
-iFileName // (text) :  is the input file name <main>
-oFileName // (text) :  is the output file name <main>
-dFileName // (text) : is the default file name <main>
-wait // (text) : just a variable to read the ENTER key at the end of the program. <main>
-nonDup //(list of texts) is a list of non duplicate emails <main>

-filetype // (text): is either "input" or "output" choice, value required by the subprogram "getFileName" <getFileName>
-dFileName // (text) : is the default file name value required by the subprogram "getFileName" <getFileName>
-valid // (boolean) : is true when the input is already processed by validation function <getFileName>
-fileName // (text) : is the text entered by the user, value returned to main program <getFileName>

-iFileName // (text): is the name of the input file, value required by the subprogram <readFile>
-lineFromFile //(text) is a line read from the input file <readFile>
-nLines // (integer) number of lines of the file <readFile>
-i //(integer) counter to traverse the list of non emails <readFile>

-lineFromFile // (text) is a line read from the input file, value required by the subprogram <processLine>
-i //(integer) is a counter used to process each character of the line and find an '@' <processLine>
-s //(integer) is the character position in lineFromFile for the start of a possible email <processLine>
-e //(integer) is the character position in lineFromFile for the end of a possible email <processLine>
-dotPos //(integer) is the character number of lineFromFile in which the dot is <processLine>
-hasDot //(integer) is true if the possible email has a dot on their characters <processLine>
-anEmail // (string) is an sub string of lineFromFile that stores a possible valid email <processLine>

-c // (character) is a character from the possible email, value required by the subprogram <isValidChar>
-result // (boolean) is true if a character is a valid email character, value returned to subprogram processLine <isValidChar>

-anEmail // (string) is a possible valid email, value required by the subprogram <isDuplicate>
-i // (integer) counter used to traverse the list of emails and check for duplicates <isDuplicate>
-duplicate // (bool) is true when a duplicate has been found in the list <isDuplicate>

-s // (text) is a line of text, value required by the subprogram <changeCase>
-lc_s // (text) is a copy of s to be case lowered, value returned to subprogram isDuplicate <changeCase>

-i // (integer) a counter to compare each email i with the rest, outer loop <sortList>
-j // (integer) a counter to select an email j to compare with the email i, inner loop <sortList>
-temp //(text) a tempory variable used when swaping email in the list <sortList>

-i // (integer) a counter to traverse each email in the list <outputList>

3. Algorithm instructions (recipe)

-->algorithm for "main" program
***data
10 set dFileName = "fileContainingEmails.txt"
15 create empty list of texts nonDup
***introduction 
20 output introduction: objective, author, instructions/rules
***get filenames (input and output) using variable prompts and default filenames and input validation
30 set iFileName = fileName from subprogram "getFileName" (give the values of "input" as filetype and dFileName as dFileName)
35 if iFileName = dFileName then dFileName = "copyPasteMyEmails.txt", else dFileName = iFileName
40 set oFileName = fileName from subprogram "getFileName" (give the values of "output" as filetype and dFileName as dFileName)
***output filenames and pause program execution until user presses enter key
50 output label for the input file name, and iFileName
55 output label for the output file name, and oFileName
60 output a prompt to press ENTER key to continue
65 input wait
***read input file (subprogram readFile)
70 go to subprogram readFile (give the value of iFileName as iFileName)
***sort list of non-duplicate email alphabetically
80 go to subprogram sortList
***output list of emails to output file and to console giving instructions on how to use it 
90 if size of nonDup list is 0 the output "Sorry, no email addresses were found in the file " and iFileName, then skip to 999
100 go to subprogram outputList (give the value of oFileName)
999 END

-->algorithm for subprogram "getFileName" :
***get filenames (input and output) using variable prompts and default filenames and input validation
1010 set fileName = "No name"
1015 if filetype = "input" then output "Enter input filename [Press ENTER for default: " and dFileName " ]: " , otherwise if filetype = "input" then output "Enter output filename [Press ENTER for default: " and dFileName " ]: "
1020 input fileName
1025 if fileName length is 0 then fileName = dFileName and skip to line 1040,
1030 set valid to false
1035 if fileName length < 5 OR (character "fileName length-1" of fileName is different from 't') OR (character "fileName length-2" of fileName is different from 'x') OR (character "fileName length-3" of fileName is different from 't') OR (character "fileName length-4" of fileName is different from '.') then output "Sorry, that is an invalid name. The file name must have the .txt extension. Try again please.", otherwise set valid to true
1040 if valid = true the skip to line 1050
1045 go back to line 1015
1050 return to main program the value of fileName

-->algorithm for subprogram "readFile" :
***read input file
2010 set nLines = 0
2012 set hasDot = false
2015 open input file named as the value of iFileName
2020 if the file contain errors, output "Sorry, it seems that the file " iFileName " cannot be opened. It might contain an error, not exist in local directory or be locked to access." , and skip to line 2060
2025 if end-of-file is reached skip to line 2050
2030 set lineFromFile = next line of the file
2035 output "Emails found in the file " and value of iFileName, then go to subprogram processLine (give the value of lineFromFile)
2040 nLines = nLines + 1
2045 go back to 2025
2050 if nEmails = 0 output "Sorry, no email addresses were found in the file" and value of iFileName, then skip to line 2060
2051 set i = 0
2052 if i >= size of nonDup list skip to line 2060
2053 output nonDup[i]
2054 i = i + 1
2055 go back to 2052
2060 output "Number of valid email addresses is " and the number of elements stored in list nonDup
2070 return to main program

-->algorithm for subprogram "processLine"
***search each line for @'s if 1st valid email address character of anEmail is before @, and 1st non-valid email address character is after @, and there is a dot at least 1 character beyond @, then extract a valid email address
3010 set nEmails = 0
3015 set i = 0
3020 if i >= lineFromFile length then skip to 3210
3030 if lineFromFile[i] is not @ skip to 3190
**Loop to traverse lineFromFile from the character @ to the left
3040 set s = i - 1
3050 if s = 0 skip to 3100
3060 go to subprogram isValidChar giving the value of lineFromFile[s], if value returned is false set s = s + 1 and skip to line 3100 
3070 s = s - 1
3090 go back to 3050
**Loop to traverse lineFromFile from the character @ to the right
3100 set e = i + 1
3110 if e = lineFromFile length, set e = lineFromFile length - 1 and  skip to  3160
3120 go to subprogram isValidChar giving the value of lineFromFile[e] as c , if value returned is false set e = e - 1 and skip to line 3160
3130 if lineFromFile[e] = '.' then set hasDot to true and dotPos to e
3140 e = e + 1
3150 go back to 3110
**Decide whether to extract and output the email
3160 if (s < i) AND (e > i) AND (hasDot) AND (dotPos > i + 1) then set anEmail to the extracted characters (s-e) from lineFromFile, otherwise skip to 3190
3170 go to subprogram isDuplicate (give the value of anEmail)
3180 i = e
3190 i = i + 1
3200 go back to 3020
3210 return to subprogram readFile

-->algorithm for subprogram "isValidChar"
***check whether a character is a valid email address charact
4010 set result true
4020 if c is not in the range of A-Z AND not in the range of a-z AND not in the range of 0-9 AND is NOT '_' AND '.' AND '-' AND '+' then set result to false
4030 return the value of result to subprogram processLine

-->algorithm for subprogram "isDuplicate"
***maintain list of non-duplicate email addresses by checking for case independent duplicate email addresses
5010 set duplicate = false
5020 set i = 0
5030 set anEmail to the value returned by the subprogram changeCase (give the value of anEmail as "s")
5040 if i >= size of nonDup list skip to 5080
5050 if anEmail = value returned by the subprogram changeCase (give the value of nonDup[i] as "s"), then set duplicate = true
5060 i = i + 1
5070 go back to 5040
5080 if duplicate = false, store the value of anEmail in the back of the list nonDup and output its value console
5090 return to subprogram processLine

-->algorithm for subprogram "changeCase"
***change the case of a string for comparisions
6010 set lc_s = s
6020 convert all character of lc_s to lowercase
6030 return lc_s to subprogram isDuplicate

-->algorithm for subprogram <sortList>
***sort list of non-duplicate email alphabetically 
7010 set i = 0
7015 if i >= size of nonDup list then skip to 7055
7020 set j = i + 1 
7025 if j >= size of nonDup list then skip to 7045
7030 if nonDup[i] > nonDup [j] then temp = nonDup[i], nonDup[i] = nonDup[i], nonDup[i] = temp
7035 j = j + 1
7040 go back to 7025
7045 i = i + 1
7050 go back to 7015
7055 return to main program

-->algorithm for subprogram <outputList>
***output list of emails to output file and to console giving instructions on how to use it
8010 output "SUCCESS! " and size of nonDup list " emails were found, and copied to the file " and value oFileName  " as follows:"
8020 set i = 0
8025 open text file named as oFileName, if it does not exist create it
8030 if i >= size of nonDup list then go to 8050
8040 Write nonDup[i] "; " to oFileName and output the same to console, if i = size of nonDup list, write and output without the semicolon and space.
8045 i = i + 1
8046 go back to 8030
8050 output "Now, you may open the file " and value of oFileName " and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message."
8060 output "In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to."
8070 return to main program

4. Test cases (list purpose of each test case, any input values, and expected results)

Test case #1
-->purpose: test simplest case to see if program succesfully sort and outputs list of nonDup email leaving the email without a semicolon and space.
-->value of nonDup list after readFile subprogram: nonDup = ["vcolber@dvc.edu" "rburns@dvc.edu"]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Emails found in the file x.txt: 
vcolber@dvc.edu
rburns@dvc.edu
SUCCESS! 2 emails were found, and copied to the file y.txt as follows:
rburns@dvc.edu; vcolber@dvc.edu
Now, you may open the file y.txt and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message.
In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to.
-->expected file output: y.txt created and written with: "rburns@dvc.edu; vcolber@dvc.edu"
-->execution
<main>
.
.
.
***sort list of non-duplicate email alphabetically
80 go to subprogram sortList
<sortList>
7010 set i = 0
7015 False, i = 0 is not >= 2
7020 set j = 0 + 1 = 1
7025 False, j = 1 is not >= 2
7030 True, 'v' > 'r' in ASCII code, temp = rburns@dvc.edu, nonDup[0] = vcolber@dvc.edu], nonDup[1] = rburns@dvc.edu
7035 j = 1+ 1 = 2
7040 going back to 7025
7025 True, j = 2 is  >= 2, skipping to 7045
7045 i = 0 + 1 = 1
7050 going back to 7015
7015 False, i = 1 is not >= 2
7020 set j = 1 + 1 = 2
7025 True, j = 2 is  >= 2, skipping to 7045
7045 i = 1 + 1 = 2
7050 going back to 7015
7015 True, i = 2 is = >= 2, skipping to 7055
7055 return to main program
<main>
***output list of emails to output file and to console giving instructions on how to use it 
90 False, size of nonDup list is 2 not 0
100 going to subprogram outputList (give the value of oFileName = y.txt)
<outputList>
8010 "SUCCESS! "2 emails were found, and copied to the file y.txt as follows:"
8020 i = 0
8025 y.txt created and opened
8030 False, i = 0 is not >= 2
8040 "rburns@dvc.edu; ", "rburns@dvc.edu; " written on y.txt 
8045 i = 0 + 1 = 1
8046 go back to 8030
8030 False, i = 1 is not >= 2
8040 "vcolber@dvc.edu", "rburns@dvc.edu" written on y.txt 
8045 i = 1 + 1 = 2
8046 go back to 8030
8030 True, i = 2 is  >= 2, skipping  8050
8050 "Now, you may open the file " and value of oFileName " and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message."
8060 "In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to."
8070 returning to main program
<main>
999 END
-->comments: the program succesfully sorted the emails and output them to console and file. test passed.

Test case #2
-->purpose: test if program sorts emails case independently
-->value of nonDup list after readFile subprogram: nonDup = ["rburns@dvc.edu" "vcolber@dvc.edu" "Trey@dvc.edu"]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Emails found in the file x.txt: 
rburns@dvc.edu
vcolber@dvc.edu
Trey@dvc.edu
SUCCESS! 3 emails were found, and copied to the file y.txt as follows:
rburns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu
Now, you may open the file y.txt and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message.
In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to
-->expected file output: y.txt created and written with: "rburns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu"

Test case #3
-->purpose: test whether the program fails by outputting duplicates regardless of case
-->value of nonDup list after readFile subprogram: nonDup = ["rburns@dvc.edu" "vcolber@dvc.edu" "Trey@dvc.edu" "RBURNS@dvc.edu"]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Emails found in the file x.txt: 
rburns@dvc.edu
vcolber@dvc.edu
Trey@dvc.edu
SUCCESS! 3 emails were found, and copied to the file y.txt as follows:
rburns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu
Now, you may open the file y.txt and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message.
In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to
-->expected file output: y.txt created and written with: "rburns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu"

Test case #4
-->purpose: test whether the program fails by outputting converted case emails 
-->value of nonDup list after readFile subprogram: nonDup = ["RBurns@dvc.edu" "rburns@dvc.edu" "vcolber@dvc.edu" "Trey@dvc.edu"]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Emails found in the file x.txt: 
RBurns@dvc.edu
vcolber@dvc.edu
Trey@dvc.edu
SUCCESS! 3 emails were found, and copied to the file y.txt as follows:
RBurns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu
Now, you may open the file y.txt and copy/paste its contents into the 'to', 'cc', or 'bcc' field of any email message.
In order to protect you recipients privacy, we suggest you to use 'bcc' field since it does not show the other recipients you have sent the email to.
-->expected file output: y.txt created and written with: "RBurns@dvc.edu; Trey@dvc.edu; vcolber@dvc.edu"

Test case #5
-->purpose: test whether the program recognizes that the input file does not exist, outputs an error message and terminates the program 
-->user input: iFileName = x.txt [does not exist]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Sorry, it seems that the file x.txt cannot be opened. It might contain an error, not exist in local directory or be locked to access.
-->expected file output: none

Test case #6
-->purpose: test whether the program recognizes that the input file is empty, outputs an message and DO NOT creates an output file 
-->user input: iFileName = x.txt [empty], oFileName = y.txt
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt]: x.txt
Enter output filename [Press ENTER for default: x.txt]: y.txt
-> Input file: x.txt
-> Output file: y.txt
Press ENTER key to continue:
Emails found in the file x.txt: 
Sorry, no email addresses were found in the file x.txt
-->expected file output: none


--------TEST CASES FROM VERSION P2D-------------
Test case #1
-->purpose: test essential given test case to see if program succesfully stores email in list
-->input for processLine function:
lineFromFile="rburns@dvc.edu vcolber@dvc.edu";
              012345678911234567890123456789
-->variables after processLine function:
> '@' found in i=6
i=6
s=0
e=30
dotPos=10
hasDot=true
anEmail="rburns@dvc.edu"
nonDup = [rburns@dvc.edu]
>'@' found in i=22
i=22
s=15
e=30
dotPos=26
hasDot=true
anEmail="vcolber@dvc.edu"
nonDup = [rburns@dvc.educ , vcolber@dvc.edu]
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt ]: t.txt
Enter output filename [Press ENTER for default: t.txt ]: 
-> Input file: t.txt
-> Output file: t.txt
Press ENTER key to continue:

rburns@dvc.edu
vcolber@dvc.edu

Number of valid email addresses is 2

Test case #2
-->purpose: test with at least one repetead email
-->input for processLine function:
lineFromFile="rburns@dvc.edu vcolber@dvc.edu rburns@dvc.edu";
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt ]: t.txt
Enter output filename [Press ENTER for default: t.txt ]: 
-> Input file: t.txt
-> Output file: t.txt
Press ENTER key to continue:

rburns@dvc.edu
vcolber@dvc.edu

Number of valid email addresses is 2

Test case #3
-->purpose: test with repetead emails with different case
-->input for processLine function:
lineFromFile="rburns@dvc.edu vcolber@dvc.edu RBURNS@dvc.edu VcoLBER@dvc.edu";
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt ]: t.txt
Enter output filename [Press ENTER for default: t.txt ]: 
-> Input file: t.txt
-> Output file: t.txt
Press ENTER key to continue:

rburns@dvc.edu
vcolber@dvc.edu

Number of valid email addresses is 2

Test case #4
-->purpose: test with various repeated emails with different case in different lines
-->input file x.txt:
####rburns@dvc.edu vcolber@dvc.edu###%###lUiscermENO@hotmail.com
VcolBER@dvc.edu LUISCERMENO_8@hotmail.com
>>>>>>>rburns@dvc.edu%%
rburnS@dvc.edu**luiscermeno_8@hotmail.com<<<<<<
-->expected console output:
Enter input filename [Press ENTER for default: fileContainingEmails.txt ]: x.txt
Enter output filename [Press ENTER for default: x.txt ]: 
-> Input file: x.txt
-> Output file: x.txt
Press ENTER key to continue:

rburns@dvc.edu
vcolber@dvc.edu
luiscermeno_8@hotmail.com

Number of valid email addresses is 3


--------TEST CASES FROM VERSION P2C-------------

Test case #1
-->purpose: test essential given test case
-->input for processLine function:
lineFromFile="rburns@dvc.edu";
              01234567891123
-->expected console output:
rburns@dvc.edu;

Test case #2
-->purpose: test essential given test case with two emails
-->input for processLine function:
lineFromFile="rburns@dvc.edu vcolber@dvc.edu";
              012345678911234567890123456789
-->expected console output:
rburns@dvc.edu; vcolber@dvc.edu;


--------TEST CASES FROM VERSION P2B-------------
Test case #1: 
-->purpose: simplest given test case
-->input file: 0.txt
Nothing
here
@
@x
x@
x@x
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 0.txt 
Enter output filename [default: 0.txt]: y.txt 
Input file: 0.txt
Output file: y.txt
press ENTER key to continue:
@
@x
x@
x@x
-->comments: execution succesfully completed, got expected results

Test case #2 : 
-->purpose: test what if there are more than 1 @'s
-->input file: 0.txt
Nothing
here
@
@x@
x@x@x@
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 0.txt 
Enter output filename [default: 0.txt]: y.txt 
Input file: 0.txt
Output file: y.txt
press ENTER key to continue:
@
@x@
@x@
x@x@x@
x@x@x@
x@x@x@

Test case #3 : 
-->purpose: test what if there are no lines in the text file
-->input file: 0.txt (empty)

-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 0.txt 
Enter output filename [default: 0.txt]: y.txt 
Input file: 0.txt
Output file: y.txt
press ENTER key to continue:
-comments: for future versions program should alert user about this issue

Test case #4 test what if the input file does not exist: 
-->purpose: simplest given test case
-->input file: 0.txt (does not exist)
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 0.txt 
Enter output filename [default: 0.txt]: y.txt 
Input file: 0.txt
Output file: y.txt
press ENTER key to continue:
999 END
-comments: for future versions program should alert user about this issue

--------TEST CASES FROM VERSION P2A-------------
Test case #1: given test case (no default choices)
-->purpose: what if user enters two default choices
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: x.txt 
Enter output filename [default: x.txt]: y.txt 
Input file: x.txt
Output file: y.txt
press ENTER key to continue:

Test case #2:
-->purpose: what if user enters default choice for inputfile
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: x.txt 
Enter output filename [default: x.txt]: 
Input file: x.txt
Output file: x.txt
press ENTER key to continue:

Test case #3: 
-->purpose: what if user enters default choice for outputfile
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 
Enter output filename [default: copyPasteMyEmails.txt]: y.txt 
Input file: fileContainingEmails.txt
Output file: y.txt
press ENTER key to continue:

Test case #4: given test case (no default choices)
-->purpose: what if user enters two default choices
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: x.txt 
Enter output filename [default: x.txt]: y.txt 
Input file: x.txt
Output file: y.txt
press ENTER key to continue:

Test case #5: 
-->purpose: test if program is able to detect an invalid input
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: .txt 
Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
Enter input filename [default: fileContainingEmails.txt]: x.doc
Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
Enter input filename [default: fileContainingEmails.txt]: x.txt
Enter output filename [default: x.txt]: y.txt  
Input file: x.txt
Output file: y.txt
press ENTER key to continue: