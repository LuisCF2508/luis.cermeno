@copyrighted 1999 Valerie Colber
Luis Cermeno-Farro 1837034:  
Course and section: COMSC-110-8076

1. Objective (1 sentence brief description of what this will do): 
Create a program to identify '@' characters and output the lines containing them for the term project

2. Requirements (any and all requirements organized by input, processing, output, data):
INPUT (any data items to be input): 
-iFileName
-oFileName
-enterKey

PROCESSING (list of significant parts of the objective that will become the list of code blocks in program):
1. data definitions
2. user introduction
3. input filenames (input and output) using variable prompts and default filenames and input validation
4. output filenames and pause program execution until user presses enter key
5. read input file and output lines with @


OUTPUT (list of anything output: introduction, data items, labels, prompts) : 
-user introduction: introduction of objective, author, "This program will prompt you for two text file names, an input and an output file. The program will read you input file and then show the lines containing the character '@'.Please type the name of each file correctly including the extension .txt. No other file extension is yet supported.".
-prompt "Enter input filename [Press ENTER for default: " and defaultName " ]: "
-prompt "Enter output filename [Press ENTER for default: " and defaultName " ]: "
-inputValidation "Sorry, that is an invalid name. The file name must have the .txt extension. Try again please." 


DATA (list of all data items: definition, data type, formatting, or any other specifications):

-iFileName // (text) :  is the input file name <main>
-oFileName // (text) :  is the output file name <main>
-dFileName // (text) : is the default file name <main>
-enterKey // (text) : just a variable to read the ENTER key at the end of the program. <main>
-type // (text): is either "input" or "output" choice given to the subprogram "getFileName" <getFileName>
-defaultName // (text) : is the default file name given to the subprogram "getFileName" <getFileName>
-userInput // (text) : is the text entered by the user returned to the main program <getFileName>
-valid // (boolean) : is true when the input is already processed by validation function <getFileName>
-inputName // (text): is the text entered by the user given to the subprogram "validateInput" <validateInput>
-isValid // (boolean) : is true when the input is valid, returned to the getFileName subprogram <validateInput>
-n // (integer) is the number of characters of the text input  <validateInput>
-iFileName // (text): is the name of the input file given to the subprogram "readFile" <readFile>
-readLine //(text) is a line read from the input file <readFile>
-i //(integer) is a counter used to process the line read a look for '@' <readFile>


3. Algorithm instructions (recipe)

--->algorithm for subprogram "validateInput" : checks for valid input
2010 set isValid to false
2015 set n to length of inputName
2020 if n < 5 OR (character "n-1" of inputName is different from 't') OR (character "n-2" of inputName is different from 'x') OR (character "n-3" of inputName is different from 't') OR (character "n-4" of inputName is different from '.') then output "Sorry, that is an invalid name. The file name must have the .txt extension. Try again please.", otherwise set isValid to true
2025 return from subprogram "validateInput" with isValid value 

-->algorithm for subprogram "getFileName" : prompts for input for either input or output file names, also checks for default input
1010 set userInput = "No name"
1015 if type = "input" then output "Enter input filename [Press ENTER for default: " and defaultName " ]: " , otherwise if type = "input" then output "Enter output filename [Press ENTER for default: " and defaultName " ]: "
1020 input userInput
1025 if length of userInput is 0 then userInput = defaultName and skip to line 1040, otherwise set valid = isValid from subprogram validateInput (give the value of userInput as inputName)
1030 if valid = true the skip to line 1040
1035 go back to line 1015
1040 return from subprogram "getFileName" with userInput value

-->algorithm for subprogram "readFile" : reads input file until EOF that calls function processLine for each line read from the input file
3010 open input file named as the value of iFileName
3015 if the file contain errors, skip to line 3055
3020 if end-of-file is reached skip to line 3055
3025 set readLine = next line of the file
3030 set i = 0
3035 if i => length of readLine then skip to line 3050
3040 if character i of readLine is equal to '@' then output readLine
3041 i = i + 1
3045 go back to line 3035
3050 go back to line 3020
3055 return to main program

-->algorithm for "main" program
***data
10 set dFileName = "fileContainingEmails.txt"
***introduction 
20 output introduction: objective, author, instructions/rules
***prompt user for file name, check for default and valid input
30 set iFileName = userInput from subprogram "getFileName" (give the values of "input" as type and dFileName as defaultName)
35 if iFileName = dFileName then dFileName = "copyPasteMyEmails.txt", else dFileName = iFileName
40 set oFileName = userInput from subprogram "getFileName" (give the values of "output" as type and dFileName as defaultName)
***output file names
50 output label for the input file name, and iFileName
55 output label for the output file name, and oFileName
60 output a prompt to press ENTER key to continue
65 input enterKey
70 go to subprogram readFile (give the value of iFileName as iFileName)
999 END


4. Test cases (list purpose of each test case, any input values, and expected results)

Test case #1: test the given test case
-->input file: 0.txt (modified)
Nothing
here
@
@x
x@
x@x
x@x@
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: 0.txt 
Enter output filename [default: 0.txt]: y.txt 
Input file: 0.txt
Output file: y.txt
press ENTER key to continue:
@
@x
x@
x@x
x@x@
x@x@
-->execution:
***data
10 dFileName = "fileContainingEmails.txt"
***introduction 
20 user introduction output
***prompt user for file name, check for default and valid input.
<getFileName>
1010 userInput = "No name"
1015 Enter input filename [Press ENTER for default: fileContainingEmails.txt]:
1020 0.txt

<validateInput>
2010 isValid = false
2015 n = 5
2020 False, isValid = true
2025 return isValid = true to getFileName 

<getFileName>
1025 False, valid = isValid = true
1030 True, skipping to line 1040
1040 return userInput = 0.txt to main

<main>
30 set iFileName = userInput = 0.txt
35 False, dFileName = iFileName

<getFileName>
1010 userInput = "No name"
1015 Enter output filename [Press ENTER for default: x.txr]:
1020 y.txt

<validateInput>
2010 isValid = false
2015 n = 5
2020 False, isValid = true
2025 return isValid = true to getFileName 

<getFileName>
1025 False, valid = isValid = true
1030 True, skipping to line 1040
1040 return userInput = y.txt to main

<main>
40 set oFileName = userInput = y.txt
***output file names
50 Input file: 0.txt
55 Output file: y.txt
60 press ENTER key to continue:
65 ENTER KEY
70 going to subprogram readFile

<readFile>
3010 "0.txt" opened
3015 False, no errors
3020 False, EOF not yet reached
3025 readLine = "Nothing"
3030 i = 0
3035 False
3040 False
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 False
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 False
3040 False
3041 i = 2 + 1 = 3
3045 going 3035
3035 False
3040 False
3041 i = 3 + 1 = 4
3045 going back to line 3035
3035 False
3040 False
3041 i = 4 + 1 = 5
3045 going back to line 3035
3035 False
3040 False
3041 i = 5 + 1 = 6
3045 going back to line 3035
3035 False
3040 False
3041 i =  6 + 1 = 7
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "here"
3030 i = 0
3035 False
3040 False
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 False
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 False
3040 False
3041 i = 2 + 1 = 3
3045 going 3035
3035 False
3040 False
3041 i = 3 + 1 = 4
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "@"
3030 i = 0
3035 False
3040 True, @
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "@x"
3030 i = 0
3035 False
3040 True, @x
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 False
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "x@"
3030 i = 0
3035 False
3040 False
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 True, x@
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "x@x"
3030 i = 0
3035 False
3040 False
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 True, x@x
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 False
3040 False
3041 i = 2 + 1 = 3
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 False, EOF not yet reached
3025 readLine = "x@x@"
3030 i = 0
3035 False
3040 False
3041 i = 0 + 1 = 1
3045 going back to line 3035
3035 False
3040 True, x@x
3041 i = 1 + 1 = 2
3045 going back to line 3035
3035 False
3040 False
3041 i = 2 + 1 = 3
3045 going back to line 3035
3035 False
3040 True, x@x
3041 i = 3 + 1 = 4
3045 going back to line 3035
3035 True, skipping to line 3050
3050 go back to line 3020
3020 True, EOF is reached, skipping to line 3055
3055 returning to main program
<main>
999 END
-->comments: execution succesfully completed, got expected results

Test case #2: test if program detects an invalid input
-->expected console I/O execution:
Enter input filename [default: fileContainingEmails.txt]: .txt 
Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
Enter input filename [default: fileContainingEmails.txt]: x.doc
Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
Enter input filename [default: fileContainingEmails.txt]: x.txt
Enter output filename [default: x.txt]: y.txt  
Input file: x.txt
Output file: y.txt
press ENTER key to continue:
-->execution:
***data
10 dFileName = "fileContainingEmails.txt"
***introduction 
20 user introduction output
***prompt user for file name, check for default and valid input
<getFileName>
1010 userInput = "No name"
1015 Enter input filename [Press ENTER for default: fileContainingEmails.txt]:
1020 .txt
<validateInput>
2010 isValid = false
2015 n = 4
2020 True, Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
2025 return isValid = false to getFileName 
<getFileName>
1025 False, valid = isValid = false
1030 False
1035 going back to line 1015
1015 Enter input filename [Press ENTER for default: fileContainingEmails.txt]:
1020 x.doc
<validateInput>
2010 isValid = false
2015 n = 5
2020 True, Sorry, that is an invalid name. The file name must have the .txt extension. Try again please. 
2025 return isValid = false to getFileName 
<getFileName>
1025 False, valid = isValid = false
1030 False
1035 going back to line 1015
1015 Enter input filename [Press ENTER for default: fileContainingEmails.txt]:
1020 x.txt
.
.The program will continue a successful execution as proven in test case 4
.
999 END
-->comments: execution succesfully completed, got expected results